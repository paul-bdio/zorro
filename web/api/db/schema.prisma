datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model NotaryFeedback {
  id                   Int    @id @default(autoincrement())
  unsubmittedProfileId Int
  feedback             String

  UnsubmittedProfile UnsubmittedProfile @relation(fields: [unsubmittedProfileId], references: [id])

  // We don't use this relation in this direction, but Prisma requires all relations to be listed bidirectionally.
  isUnaddressed UnsubmittedProfile[] @relation("unaddressedFeedback")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([unsubmittedProfileId])
}

model UnsubmittedProfile {
  id       Int     @id @default(autoincrement())
  photoCID String
  videoCID String
  address  String  @unique
  email    String?

  unaddressedFeedbackId Int?
  UnaddressedFeedback   NotaryFeedback? @relation("unaddressedFeedback", fields: [unaddressedFeedbackId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  NotaryFeedback NotaryFeedback[]
}

// Cache of profiles populated from the `profiles` storage var in Nym.cairo
model CachedProfile {
  id Int @id

  // Fields stored on StarkNet:
  //  - cid
  //  - address
  //  - submitter_address
  //  - submission_timestamp
  //  - is_notarized
  cache Json @db.JsonB

  // Derived fields
  notarized           Boolean
  address             String   @unique
  submissionTimestamp DateTime
  CID                 String?
  photoCID            String?
  videoCID            String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Some of these are derived states that will never be persisted to the
// database. But we still need all of them recorded here so the integer offsets
// line up correctly.
enum ChallengeStatus {
  not_challenged
  challenged
  adjudicated
  adjudication_opportunity_expired
  appealed
  appeal_opportunity_expired
  super_adjudicated
  super_adjudication_opportunity_expired
  settled
}

model CachedChallenge {
  profileId Int @id

  // Fields stored on StarkNet:
  //  - last_recorded_status
  //  - challenge_timestamp
  //  - challenger_address
  //  - challenge_evidence_cid
  //  - profile_owner_evidence_cid
  //  - adjudication_timestamp
  //  - adjudicator_evidence_cid
  //  - did_adjudicator_confirm_profile
  //  - appeal_timestamp
  //  - super_adjudication_timestamp
  cache Json @db.JsonB

  lastRecordedStatus         ChallengeStatus
  challengeTimestamp         DateTime?
  adjudicationTimestamp      DateTime?
  superAdjudicationTimestamp DateTime?

  challengeEvidence            String?
  profileOwnerEvidence         String?
  adjudicatorEvidence          String?
  didAdjudicatorConfirmProfile Boolean
  appealTimestamp              DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
