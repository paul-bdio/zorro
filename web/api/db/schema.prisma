datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model NotaryFeedback {
  id                   Int    @id @default(autoincrement())
  unsubmittedProfileId Int
  feedback             String
  randomField          String

  UnsubmittedProfile UnsubmittedProfile @relation(fields: [unsubmittedProfileId], references: [id])

  // We don't use this relation in this direction, but Prisma requires all relations to be listed bidirectionally.
  isUnaddressed UnsubmittedProfile[] @relation("unaddressedFeedback")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([unsubmittedProfileId])
}

model UnsubmittedProfile {
  id         Int     @id @default(autoincrement())
  photoCID   String
  videoCID   String
  ethAddress String  @unique
  email      String?

  unaddressedFeedbackId Int?
  UnaddressedFeedback   NotaryFeedback? @relation("unaddressedFeedback", fields: [unaddressedFeedbackId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  NotaryFeedback NotaryFeedback[]
}

enum ProfileStatus {
  submitted_via_notary
  challenged
  deemed_valid
  deemed_invalid
}

// Testing
model Random3 {
  id       Int    @id @default(autoincrement())
  feedback String
}

// Cache of profiles populated from the `profiles` storage var in Nym.cairo
// model CachedProfile2 {
//   // Fields stored on StarkNet
//   id Int @id
//   // cid                  Decimal? @db.Decimal(76, 0)
//   // address              Decimal? @unique @db.Decimal(76, 0)
//   // submitter_address    Decimal? @db.Decimal(76, 0)
//   // submission_timestamp Decimal? @db.Decimal(76, 0)
//   // is_notarized         Decimal? @db.Decimal(76, 0)

//   // // Derived fields
//   // photoCID String?
//   // videoCID String?

//   // createdAt DateTime @default(now())
//   // updatedAt DateTime @updatedAt
// }

// model CachedChallenge {
//   profileId Decimal @id @db.Decimal(76, 0)

//   // TODO: use better data types here
//   last_recorded_status            Decimal @db.Decimal(76, 0)
//   challenge_timestamp             Decimal @db.Decimal(76, 0)
//   challenger_address              Decimal @db.Decimal(76, 0)
//   challenge_evidence_cid          Decimal @db.Decimal(76, 0)
//   profile_owner_evidence_cid      Decimal @db.Decimal(76, 0)
//   adjudication_timestamp          Decimal @db.Decimal(76, 0)
//   adjudicator_evidence_cid        Decimal @db.Decimal(76, 0)
//   did_adjudicator_confirm_profile Decimal @db.Decimal(76, 0)
//   appeal_timestamp                Decimal @db.Decimal(76, 0)
//   super_adjudication_timestamp    Decimal @db.Decimal(76, 0)

//   // createdAt DateTime @default(now())
//   // updatedAt DateTime @updatedAt
// }
