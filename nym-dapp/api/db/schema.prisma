datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model NotaryFeedback {
  id                   Int    @id @default(autoincrement())
  unsubmittedProfileId Int
  feedback             String

  UnsubmittedProfile UnsubmittedProfile @relation(fields: [unsubmittedProfileId], references: [id])

  // We don't use this relation in this direction, but Prisma requires all relations to be listed bidirectionally.
  isUnaddressed UnsubmittedProfile[] @relation("unaddressedFeedback")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([unsubmittedProfileId])
}

model UnsubmittedProfile {
  id         Int     @id @default(autoincrement())
  photoCID   String
  videoCID   String
  ethAddress String  @unique
  email      String?

  unaddressedFeedbackId Int?
  UnaddressedFeedback   NotaryFeedback? @relation("unaddressedFeedback", fields: [unaddressedFeedbackId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  NotaryFeedback NotaryFeedback[]
}

enum ProfileStatus {
  submitted_via_notary
  challenged
  deemed_valid
  deemed_invalid
}

// Cache of profiles populated from the `profiles` storage var in Nym.cairo
model CachedProfile {
  nymId            Int           @id @default(autoincrement())
  ethAddress       String        @unique
  status           ProfileStatus
  createdTimestamp DateTime

  CID      String
  photoCID String?
  videoCID String?

  // Associated StarkNet address
  address String?
}
